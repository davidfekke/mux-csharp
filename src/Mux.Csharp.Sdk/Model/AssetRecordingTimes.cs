/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// AssetRecordingTimes
    /// </summary>
    [DataContract(Name = "Asset_recording_times")]
    public partial class AssetRecordingTimes : IEquatable<AssetRecordingTimes>, IValidatableObject
    {
        /// <summary>
        /// The type of media represented by the recording session, either &#x60;content&#x60; for normal stream content or &#x60;slate&#x60; for slate media inserted during stream interruptions.
        /// </summary>
        /// <value>The type of media represented by the recording session, either &#x60;content&#x60; for normal stream content or &#x60;slate&#x60; for slate media inserted during stream interruptions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Content for value: content
            /// </summary>
            [EnumMember(Value = "content")]
            Content = 1,

            /// <summary>
            /// Enum Slate for value: slate
            /// </summary>
            [EnumMember(Value = "slate")]
            Slate = 2

        }

        /// <summary>
        /// Nested class for representing the started_at property
        /// </summary>
        [DataContract]
        public class StartedAtObject
        {
            [DataMember(Name = "seconds")]
            public long Seconds { get; set; }

            [DataMember(Name = "nanos")]
            public int Nanos { get; set; }
        }

        /// <summary>
        /// The time at which the recording for the live stream started.
        /// </summary>
        [DataMember(Name = "started_at", EmitDefaultValue = false)]
        public StartedAtObject StartedAtRaw { get; set; }


        /// <summary>
        /// The type of media represented by the recording session, either &#x60;content&#x60; for normal stream content or &#x60;slate&#x60; for slate media inserted during stream interruptions.
        /// </summary>
        /// <value>The type of media represented by the recording session, either &#x60;content&#x60; for normal stream content or &#x60;slate&#x60; for slate media inserted during stream interruptions.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetRecordingTimes" /> class.
        /// </summary>
        /// <param name="startedAt">The time at which the recording for the live stream started. The time value is Unix epoch time represented in ISO 8601 format..</param>
        /// <param name="duration">The duration of the live stream recorded. The time value is in seconds..</param>
        /// <param name="type">The type of media represented by the recording session, either &#x60;content&#x60; for normal stream content or &#x60;slate&#x60; for slate media inserted during stream interruptions..</param>
        public AssetRecordingTimes(StartedAtObject startedAtRaw = null, double duration = default(double), TypeEnum? type = default(TypeEnum?))
        {
            this.StartedAtRaw = startedAtRaw;
            this.Duration = duration;
            this.Type = type;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The time at which the recording for the live stream started. The time value is Unix epoch time represented in ISO 8601 format.
        /// </summary>
        /// <value>The time at which the recording for the live stream started. The time value is Unix epoch time represented in ISO 8601 format.</value>
        // [DataMember(Name = "started_at", EmitDefaultValue = false)]
        [JsonIgnore]
        public DateTime StartedAt {
            get
            {
                return DateTimeOffset.FromUnixTimeSeconds(StartedAtRaw.Seconds)
                                     .AddTicks(StartedAtRaw.Nanos / 100) // Convert nanos to ticks (1 tick = 100 ns)
                                     .UtcDateTime;
            }
        }

        /// <summary>
        /// The duration of the live stream recorded. The time value is in seconds.
        /// </summary>
        /// <value>The duration of the live stream recorded. The time value is in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public double Duration { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetRecordingTimes {\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetRecordingTimes);
        }

        /// <summary>
        /// Returns true if AssetRecordingTimes instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetRecordingTimes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetRecordingTimes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartedAt == input.StartedAt ||
                    this.StartedAt.Equals(input.StartedAt)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
